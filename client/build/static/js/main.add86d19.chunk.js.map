{"version":3,"sources":["components/profile/Profile.module.scss","components/loading/LoadingMask.module.scss","pages/Home.module.scss","store/actions/user.js","components/loading/LoadingMask.jsx","components/profile/Profile.jsx","pages/Home.jsx","store/actions/ui.js","App.js","serviceWorker.js","store/reducers/user.js","store/reducers/ui.js","store/reducers/index.js","index.js"],"names":["module","exports","container","picture","logo","rotateClockwise","inputWrapper","slideInFromLeft","label","slideInFromRight","header","slideInFromTop","input","button","usersWrapper","fetchUserSuccess","users","type","LoadingMask","react_default","a","createElement","className","styles","Profile","_this$props$details","this","props","details","location","name","src","large","alt","first","last","city","state","React","PureComponent","HomePage","count","_onFetchUserHandler","_this","fetchUsers","_onCountChangeHandler","e","setState","target","value","map","user","profile_Profile","key","email","loading","loading_LoadingMask","min","onChange","onClick","connect","ui","dispatch","_ref","Object","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","axios","get","params","sent","data","t0","stop","_x","apply","arguments","App","Switch","Route","exact","path","component","Boolean","window","hostname","match","defaultState","combineReducers","length","undefined","action","objectSpread","toConsumableArray","store","createStore","reducers","applyMiddleware","reduxThunk","defaults","baseURL","ReactDOM","render","BrowserRouter","es","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.add86d19.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Profile_container__VnGu0\",\"picture\":\"Profile_picture__wPoh5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"LoadingMask_container__1XgIA\",\"logo\":\"LoadingMask_logo__BHgH9\",\"rotateClockwise\":\"LoadingMask_rotateClockwise__1L5uq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Home_container__1nxNb\",\"inputWrapper\":\"Home_inputWrapper__1u4Ar\",\"slideInFromLeft\":\"Home_slideInFromLeft__SpO1Y\",\"label\":\"Home_label__2n5dw\",\"slideInFromRight\":\"Home_slideInFromRight__3Pn_F\",\"header\":\"Home_header__3Rc8-\",\"slideInFromTop\":\"Home_slideInFromTop__1GyaI\",\"input\":\"Home_input__2MXcv\",\"button\":\"Home_button__e8IJf\",\"usersWrapper\":\"Home_usersWrapper__3Iuxx\"};","import { onLoadingStart, onLoadingEnd } from './ui';\nimport axios from 'axios';\n\nexport const FETCH_USER_START = 'FETCH_USER_START';\nexport const FETCH_USER_SUCCESS = 'FETCH_USER_SUCCESS';\nexport const FETCH_USER_FAIL = 'FETCH_USER_FAIL';\n\nexport const fetchUserSuccess = (users) => ({\n  type: FETCH_USER_SUCCESS,\n  users,\n});\n\nexport const fetchUserFail = () => ({\n  type: FETCH_USER_FAIL,\n});\n\nexport const fetchUsers = (count) => async (dispatch) => {\n  dispatch(onLoadingStart());\n  try {\n    const users = await axios.get(`https://built-users.herokuapp.com/users`, {\n      params: {\n        count\n      }\n    })\n\n    dispatch(fetchUserSuccess(users.data))\n  } catch (e) {\n    dispatch(fetchUserFail())\n  }\n  dispatch(onLoadingEnd());\n};\n","import React from 'react';\nimport styles from './LoadingMask.module.scss';\n\nconst LoadingMask = () => (\n  <div className={styles.container}>\n    <p className={styles.logo}>...</p>\n  </div>\n);\n\nexport default LoadingMask;\n","import React from 'react';\r\nimport styles from './Profile.module.scss';\r\n\r\nclass Profile extends React.PureComponent {\r\n  render() {\r\n    const {location, name, picture} = this.props.details\r\n    return (\r\n      <div className={styles.container}>\r\n        <img src={picture.large} alt=\"profile\" className={styles.picture}/>\r\n        <div className={styles.details}>\r\n          <p>Name: {name.first} {name.last}</p>\r\n          <p>City: {location.city}</p>\r\n          <p>State: {location.state}</p>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Profile;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { fetchUsers } from '../store/actions/user';\r\nimport Loading from '../components/loading/LoadingMask';\r\nimport Profile from '../components/profile/Profile';\r\nimport styles from './Home.module.scss';\r\n\r\nclass HomePage extends React.PureComponent {\r\n  state = {\r\n    count: 1\r\n  }\r\n\r\n  componentDidMount() {\r\n    this._onFetchUserHandler()\r\n  }\r\n\r\n  _onFetchUserHandler = () => {\r\n    const {count} = this.state\r\n    this.props.fetchUsers(count ? count : 1)\r\n  }\r\n\r\n  _onCountChangeHandler = (e) => {\r\n    this.setState({\r\n      count: e.target.value\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const users = this.props.users.map(user => <Profile key={user.email} details={user} />)\r\n\r\n    return (\r\n      <div className={styles.container}>\r\n        {this.props.loading ? <Loading /> : null}\r\n        <h1 className={styles.header}>Test Users</h1>\r\n        <p className={styles.label}>Enter number of person to display</p>\r\n        <div className={styles.inputWrapper}>\r\n          <input type=\"number\" min=\"1\" value={this.state.count} onChange={this._onCountChangeHandler} className={styles.input} />\r\n          <button className={styles.button} onClick={this._onFetchUserHandler}>Update</button>\r\n        </div>\r\n        <div className={styles.usersWrapper}>\r\n          {users}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  users: state.user.users,\r\n  loading: state.ui.loading\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  fetchUsers: count => dispatch(fetchUsers(count))\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(HomePage);\r\n","export const ON_LOADING_START = 'ON_LOADING_START';\r\nexport const ON_LOADING_END = 'ON_LOADING_END';\r\n\r\nexport const onLoadingStart = () => ({\r\n  type: ON_LOADING_START,\r\n});\r\n\r\nexport const onLoadingEnd = () => ({\r\n  type: ON_LOADING_END,\r\n});\r\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport HomePage from './pages/Home';\n\nconst App = () => (\n  <main>\n    <Switch>\n      <Route exact path=\"/\" component={HomePage} />\n      <Route path=\"/resume\" component={HomePage} />\n    </Switch>\n  </main>\n);\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { FETCH_USER_SUCCESS } from '../actions/user';\n\n// type User = {\n//   name: String,\n//   city: String,\n//   state: String,\n//   picture: String\n// }\n\nconst defaultState = {\n  users: []\n};\n\nexport default (state = defaultState, action) => {\n  switch (action.type) {\n    case FETCH_USER_SUCCESS:\n      return {\n        ...state,\n        users: [...action.users],\n      };\n    default:\n      return state;\n  }\n};\n","import { ON_LOADING_END, ON_LOADING_START } from '../actions/ui';\n\nconst defaultState = {\n  loading: false,\n};\n\nexport default (state = defaultState, action) => {\n  switch (action.type) {\n    case ON_LOADING_START:\n      return {\n        ...state,\n        loading: true,\n      };\n    case ON_LOADING_END:\n      return {\n        ...state,\n        loading: false,\n      };\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from 'redux';\r\n\r\nimport user from './user';\r\nimport ui from './ui';\r\n\r\nexport default combineReducers({\r\n  user,\r\n  ui\r\n});\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport axios from 'axios';\nimport App from './App';\nimport 'normalize.css';\nimport './assets/styles/index.scss';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\nimport reducers from './store/reducers/index';\nimport { Provider } from 'react-redux';\nimport reduxThunk from 'redux-thunk';\nimport { createStore, applyMiddleware } from 'redux';\n\nconst store = createStore(reducers, applyMiddleware(reduxThunk));\n\nif (!process.env.NODE_ENV || process.env.NODE_ENV === 'development') {\n  // dev code\n  axios.defaults.baseURL = 'http://localhost:3001';\n} else {\n  axios.defaults.baseURL = 'https://built-users.herokuapp.com/';\n  // production code\n}\n\nReactDOM.render(\n  <BrowserRouter>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </BrowserRouter>,\n  document.getElementById('root')\n);\nserviceWorker.unregister();\n\n"],"sourceRoot":""}